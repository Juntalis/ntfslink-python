# encoding: utf-8
"""
supports.py
TODO: Description

This program is free software. It comes without any warranty, to
the extent permitted by applicable law. You can redistribute it
and/or modify it under the terms of the Do What The Fuck You Want
To Public License, Version 2, as published by Sam Hocevar. See
http://sam.zoy.org/wtfpl/COPYING for more details.
"""

from . import _winapi as winapi
from .. import _util as utility

if utility.is_winxp:
	# The following is only necessary for Windows XP users, who can use symbolic
	# links through a third party driver.
	# The Windows XP Driver can be found at: http://homepage1.nifty.com/emk/
	# Download (32-bit): http://homepage1.nifty.com/emk/symlink-1.06-x86.cab
	# Download (64-bit): http://homepage1.nifty.com/emk/symlink-1.06-x64.zip
	# English Info: http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html#symboliclinksforwindowsxp
	WINXP_DRIVER_NAME = 'symlink'

	ERROR_SUCCESS = 0
	ERROR_SERVICE_DOES_NOT_EXIST = 1060
	SC_MANAGER_CONNECT = SERVICE_QUERY_CONFIG = 0x0001

	# Easier to work with LPVOID, especially we're just using NULL for most
	# parameters.
	_OpenSCManager = winapi.WINFUNCTYPE(
		winapi.HANDLE,
		winapi.LPVOID, winapi.LPVOID, winapi.DWORD,
		use_last_error=True, use_tchar=True
	)(('OpenSCManager', winapi.advapi32,))

	_OpenService = winapi.WINFUNCTYPE(
		winapi.HANDLE,
		winapi.HANDLE, winapi.LPTSTR, winapi.DWORD,
		use_last_error=True, use_tchar=True
	)(('OpenService', winapi.advapi32,))

	_CloseServiceHandle = winapi.WINFUNCTYPE(
		winapi.BOOL, winapi.HANDLE, use_last_error=True
	)(('CloseServiceHandle', winapi.advapi32,))

	@utility.once
	def os_symlinks():
		installed = True
		hSCM = _OpenSCManager(0, 0, SC_MANAGER_CONNECT)
		if not hSCM:
			raise winapi.WinError(code=winapi.get_last_error())
		hService = _OpenService(hSCM, WINXP_DRIVER_NAME, SERVICE_QUERY_CONFIG)
		if not hService:
			lasterror = winapi.get_last_error()
			if lasterror == ERROR_SERVICE_DOES_NOT_EXIST:
				hService = None
				installed = False
				winapi.set_last_error(ERROR_SUCCESS)
			else:
				raise winapi.WinError(code=lasterror)

		if hService is not None:
			_CloseServiceHandle(hService)
		_CloseServiceHandle(hSCM)
		return installed

else:
	# Windows Vista+ Implementation

	def os_symlinks():
		return True



def getvolumeinfo(path):
	"""
	Return information for the volume containing the given path. This is going
	to be a pair containing (file system, file system flags).
	"""

	# Add 1 for a trailing backslash if necessary, and 1 for the terminating
	# null character.
	volpath = winapi.create_tstring_buffer(len(path) + 2)
	rv = GetVolumePathName(path, volpath, len(volpath))
	if rv == 0:
		raise WinError()

	fsnamebuf = ctypes.create_unicode_buffer(MAX_PATH + 1)
	fsflags = DWORD(0)
	rv = GetVolumeInformation(volpath, None, 0, None, None, byref(fsflags),
		fsnamebuf, len(fsnamebuf))
	if rv == 0:
		raise WinError()

	return (fsnamebuf.value, fsflags.value)
